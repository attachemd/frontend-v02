{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Me\\\\Documents\\\\Me\\\\fullstack\\\\frontend-v02\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HeaderComponent } from './header.component';\nimport { AuthService } from \"../../auth/auth.service\";\nimport { of, Subject, throwError } from \"rxjs\";\nimport { click } from \"../../spec-helpers/element.spec-helper\";\ndescribe('HeaderComponent', () => {\n  let component;\n  let fixture;\n  let authServiceSpy;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    // let authChange$: Subject<boolean> = new Subject<boolean>();\n    authServiceSpy = {\n      authChange$: new Subject(),\n\n      authChangeNotifier() {},\n\n      registerUser() {\n        return of(true);\n      },\n\n      login() {\n        return of(true);\n      },\n\n      logout() {},\n\n      refreshTokenOrDie() {\n        return of(true);\n      },\n\n      isBothTokensAlive() {\n        return of(true);\n      },\n\n      isToken() {\n        return true;\n      },\n\n      authState() {\n        return of(true);\n      },\n\n      authSuccessfully() {}\n\n    };\n    spyOn(authServiceSpy, 'authChangeNotifier').and.callThrough();\n    spyOn(authServiceSpy, 'registerUser').and.callThrough();\n    spyOn(authServiceSpy, 'login').and.callThrough();\n    spyOn(authServiceSpy, 'logout').and.callThrough();\n    spyOn(authServiceSpy, 'refreshTokenOrDie').and.callThrough();\n    spyOn(authServiceSpy, 'isBothTokensAlive').and.callThrough();\n    spyOn(authServiceSpy, 'isToken').and.callThrough();\n    spyOn(authServiceSpy, 'authState').and.callThrough();\n    spyOn(authServiceSpy, 'authSuccessfully').and.callThrough(); // authServiceSpy.authChange$ = authChange$;\n\n    yield TestBed.configureTestingModule({\n      declarations: [HeaderComponent],\n      providers: [{\n        provide: AuthService,\n        useValue: authServiceSpy\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(HeaderComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('Create component', () => {\n    expect(component).toBeTruthy();\n  }); // it('Create component 2',\n  //     fakeAsync(async () => {\n  //         let isAuthenticated = true;\n  //         await authServiceSpy.authChangeNotifier(isAuthenticated);\n  //         tick(1000);\n  //         fixture.detectChanges();\n  //         expect(component.isAuthenticated).toEqual(true);\n  //     })\n  // );\n\n  it('Subscribe on authChange$.next', () => {\n    let isAuthenticated = true; // authServiceSpy.authChangeNotifier(isAuthenticated);\n    // tick(1000);\n    // fixture.detectChanges();\n\n    authServiceSpy.authChange$.next(isAuthenticated);\n    expect(component.isAuthenticated).toEqual(true);\n  });\n  it('Pass subscription on authChange$.error ', () => {\n    spyOn(authServiceSpy.authChange$, 'next') // .and.throwError('someError');\n    .and.returnValue(throwError('someError'));\n    spyOn(window.console, 'log');\n    authServiceSpy.authChange$.error(\"any error\");\n    expect(console.log).toHaveBeenCalled();\n  });\n  it('Emit sidenavToggle events on onToggleSidenav', () => {\n    let testVariable;\n    component.sidenavToggle.subscribe(() => {\n      testVariable = true;\n    });\n    click(fixture, 'menu-button');\n    expect(testVariable).toBe(true);\n  });\n  it('authService.logout should be called when onLogout', () => {\n    component.onLogout();\n    expect(authServiceSpy.logout).toHaveBeenCalled();\n  });\n});","map":{"version":3,"sources":["C:/Users/Me/Documents/Me/fullstack/frontend-v02/src/app/navigation/header/header.component.spec.ts"],"names":["TestBed","HeaderComponent","AuthService","of","Subject","throwError","click","describe","component","fixture","authServiceSpy","beforeEach","authChange$","authChangeNotifier","registerUser","login","logout","refreshTokenOrDie","isBothTokensAlive","isToken","authState","authSuccessfully","spyOn","and","callThrough","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","isAuthenticated","next","toEqual","returnValue","window","console","error","log","toHaveBeenCalled","testVariable","sidenavToggle","subscribe","toBe","onLogout"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { HeaderComponent } from './header.component';\r\nimport { AuthService } from \"../../auth/auth.service\";\r\nimport { of, Subject, throwError } from \"rxjs\";\r\nimport { click } from \"../../spec-helpers/element.spec-helper\";\r\ndescribe('HeaderComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let authServiceSpy;\r\n    beforeEach(async () => {\r\n        // let authChange$: Subject<boolean> = new Subject<boolean>();\r\n        authServiceSpy = {\r\n            authChange$: new Subject(),\r\n            authChangeNotifier() {\r\n            },\r\n            registerUser() {\r\n                return of(true);\r\n            },\r\n            login() {\r\n                return of(true);\r\n            },\r\n            logout() {\r\n            },\r\n            refreshTokenOrDie() {\r\n                return of(true);\r\n            },\r\n            isBothTokensAlive() {\r\n                return of(true);\r\n            },\r\n            isToken() {\r\n                return true;\r\n            },\r\n            authState() {\r\n                return of(true);\r\n            },\r\n            authSuccessfully() {\r\n            },\r\n        };\r\n        spyOn(authServiceSpy, 'authChangeNotifier').and.callThrough();\r\n        spyOn(authServiceSpy, 'registerUser').and.callThrough();\r\n        spyOn(authServiceSpy, 'login').and.callThrough();\r\n        spyOn(authServiceSpy, 'logout').and.callThrough();\r\n        spyOn(authServiceSpy, 'refreshTokenOrDie').and.callThrough();\r\n        spyOn(authServiceSpy, 'isBothTokensAlive').and.callThrough();\r\n        spyOn(authServiceSpy, 'isToken').and.callThrough();\r\n        spyOn(authServiceSpy, 'authState').and.callThrough();\r\n        spyOn(authServiceSpy, 'authSuccessfully').and.callThrough();\r\n        // authServiceSpy.authChange$ = authChange$;\r\n        await TestBed.configureTestingModule({\r\n            declarations: [HeaderComponent],\r\n            providers: [\r\n                { provide: AuthService, useValue: authServiceSpy }\r\n            ],\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(HeaderComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    it('Create component', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    // it('Create component 2',\r\n    //     fakeAsync(async () => {\r\n    //         let isAuthenticated = true;\r\n    //         await authServiceSpy.authChangeNotifier(isAuthenticated);\r\n    //         tick(1000);\r\n    //         fixture.detectChanges();\r\n    //         expect(component.isAuthenticated).toEqual(true);\r\n    //     })\r\n    // );\r\n    it('Subscribe on authChange$.next', () => {\r\n        let isAuthenticated = true;\r\n        // authServiceSpy.authChangeNotifier(isAuthenticated);\r\n        // tick(1000);\r\n        // fixture.detectChanges();\r\n        authServiceSpy.authChange$.next(isAuthenticated);\r\n        expect(component.isAuthenticated).toEqual(true);\r\n    });\r\n    it('Pass subscription on authChange$.error ', () => {\r\n        spyOn(authServiceSpy.authChange$, 'next')\r\n            // .and.throwError('someError');\r\n            .and.returnValue(throwError('someError'));\r\n        spyOn(window.console, 'log');\r\n        authServiceSpy.authChange$.error(\"any error\");\r\n        expect(console.log).toHaveBeenCalled();\r\n    });\r\n    it('Emit sidenavToggle events on onToggleSidenav', () => {\r\n        let testVariable;\r\n        component.sidenavToggle.subscribe(() => {\r\n            testVariable = true;\r\n        });\r\n        click(fixture, 'menu-button');\r\n        expect(testVariable).toBe(true);\r\n    });\r\n    it('authService.logout should be called when onLogout', () => {\r\n        component.onLogout();\r\n        expect(authServiceSpy.logout).toHaveBeenCalled();\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}