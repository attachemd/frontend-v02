{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Me\\\\Documents\\\\Me\\\\fullstack\\\\frontend-v02\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { LoginComponent } from './login.component';\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { AuthService } from \"../auth.service\";\nimport { of, Subject, throwError } from \"rxjs\";\nimport { UIService } from \"../../shared/ui.service\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { findEl, setFieldValue } from \"../../spec-helpers/element.spec-helper\";\nimport { blankUser, validUser } from \"../../mocks\";\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let authServiceSpy;\n  let uiServiceSpy = Object.assign(Object.assign({}, jasmine.createSpyObj(\"UIService\", {\n    loadingStateNotifier: undefined,\n    showSnackBar: undefined\n  })), {\n    loadingStateChange$: new Subject()\n  }); // const uiServiceSpy = jasmine.createSpyObj(\n  //     \"UIService\",\n  //     {\n  //         loadingStateNotifier: undefined,\n  //         showSnackBar: undefined\n  //     }\n  // );\n  // uiServiceSpy.loadingStateChange$ = new Subject<boolean>();\n  // let uiService = TestBed.get(UIService)\n  // const loadingStateChange$NextSpy = spyOn(uiService.loadingStateChange$, 'next');\n\n  const setup = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (signupServiceReturnValues) {\n      authServiceSpy = jasmine.createSpyObj('AuthService', Object.assign({\n        // Successful responses per default\n        authChangeNotifier: undefined,\n        registerUser: of(true),\n        login: of(true),\n        logout: undefined,\n        refreshTokenOrDie: of(true),\n        isBothTokensAlive: of(true),\n        isToken: true,\n        authState: of(true),\n        authSuccessfully: undefined\n      }, signupServiceReturnValues));\n      yield TestBed.configureTestingModule({\n        imports: [BrowserAnimationsModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule],\n        declarations: [LoginComponent],\n        providers: [{\n          provide: AuthService,\n          useValue: authServiceSpy\n        }, {\n          provide: UIService,\n          useValue: uiServiceSpy\n        }]\n      }).compileComponents();\n      fixture = TestBed.createComponent(LoginComponent);\n      component = fixture.componentInstance;\n      fixture.detectChanges();\n    });\n\n    return function setup(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const fillForm = (userData = validUser) => {\n    setFieldValue(fixture, 'email', userData.email);\n    setFieldValue(fixture, 'password', userData.password);\n  };\n\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {// await setup();\n  }));\n  beforeEach(() => {// fixture = TestBed.createComponent(LoginComponent);\n    // component = fixture.componentInstance;\n    // fixture.detectChanges();\n  });\n  it('should create', /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup(); // let loadingStateChange$NextSpy = spyOn(uiServiceSpy.loadingStateChange$, 'next');\n    //     // .and.throwError('someError');\n    //     // .and.returnValue(throwError('someError'));\n\n    expect(component).toBeTruthy();\n    expect(findEl(fixture, 'submit').properties.disabled).toBe(true); // expect(loadingStateChange$NextSpy).toHaveBeenCalled();\n  }));\n  it('submits the form successfully', /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup();\n    fillForm();\n    findEl(fixture, 'form').triggerEventHandler('submit', {}); // tick(1000);\n\n    expect(authServiceSpy.login).toHaveBeenCalledWith(validUser);\n    expect(authServiceSpy.authChangeNotifier).toHaveBeenCalledWith(true);\n    expect(authServiceSpy.authSuccessfully).toHaveBeenCalled();\n    fixture.detectChanges();\n    expect(findEl(fixture, 'submit').properties.disabled).toBe(false);\n  }));\n  it('does not submit an invalid form', /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup();\n    findEl(fixture, 'form').triggerEventHandler('submit', {});\n    expect(authServiceSpy.login).not.toHaveBeenCalled();\n    expect(authServiceSpy.authChangeNotifier).not.toHaveBeenCalled();\n    expect(authServiceSpy.authSuccessfully).not.toHaveBeenCalled();\n  }));\n  it('login sends falsy value when server response not valid', /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup({\n      // Let the API report a failure\n      login: of(false)\n    });\n    fillForm();\n    findEl(fixture, 'form').triggerEventHandler('submit', {});\n    expect(authServiceSpy.login).toHaveBeenCalled();\n    expect(authServiceSpy.authChangeNotifier).toHaveBeenCalled();\n    expect(authServiceSpy.authSuccessfully).not.toHaveBeenCalled();\n  }));\n  it('handles signup failure', /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup({\n      // Let the API report a failure\n      login: throwError(new Error('Validation failed'))\n    });\n    fillForm(); // Wait for async validators\n    // tick(1000);\n\n    findEl(fixture, 'form').triggerEventHandler('submit', {});\n    fixture.detectChanges();\n    expect(authServiceSpy.login).toHaveBeenCalled();\n    expect(uiServiceSpy.showSnackBar).toHaveBeenCalled();\n  }));\n  it(\"When username is blank, username field should display red outline \", /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup();\n    fillForm(blankUser);\n    fixture.detectChanges();\n    const button = fixture.debugElement.nativeElement.querySelector(\"button\");\n    button.click();\n    fixture.detectChanges(); // const inputs = fixture.debugElement.nativeElement.querySelectorAll(\"input\");\n    // const usernameInput = inputs[0];\n\n    const emailInput = findEl(fixture, 'email').nativeElement;\n    expect(emailInput.classList).toContain(\"ng-invalid\");\n  }));\n  it('Subscribe on uiServiceSpy.loadingStateChange$.next', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup();\n    let isLoadingState = true; // authServiceSpy.authChangeNotifier(isAuthenticated);\n    // tick(1000);\n    // fixture.detectChanges();\n\n    uiServiceSpy.loadingStateChange$.next(isLoadingState);\n    tick();\n    expect(component.isLoading).toEqual(true);\n  })));\n  it('Pass subscription on uiServiceSpy.loadingStateChange$.next ', /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup();\n    spyOn(uiServiceSpy.loadingStateChange$, 'next').and.returnValue(throwError('someError'));\n    spyOn(window.console, 'log');\n    uiServiceSpy.loadingStateChange$.error(\"any error\");\n    expect(console.log).toHaveBeenCalled();\n  }));\n  it('unsubscribe from loadingSubscription', /*#__PURE__*/_asyncToGenerator(function* () {\n    yield setup();\n    spyOn(component['loadingSubscription'], 'unsubscribe');\n    component.ngOnDestroy();\n    expect(component['loadingSubscription'].unsubscribe).toHaveBeenCalledTimes(1);\n  }));\n});","map":{"version":3,"sources":["C:/Users/Me/Documents/Me/fullstack/frontend-v02/src/app/auth/login/login.component.spec.ts"],"names":["fakeAsync","TestBed","tick","LoginComponent","ReactiveFormsModule","AuthService","of","Subject","throwError","UIService","MatFormFieldModule","MatInputModule","BrowserAnimationsModule","findEl","setFieldValue","blankUser","validUser","describe","component","fixture","authServiceSpy","uiServiceSpy","Object","assign","jasmine","createSpyObj","loadingStateNotifier","undefined","showSnackBar","loadingStateChange$","setup","signupServiceReturnValues","authChangeNotifier","registerUser","login","logout","refreshTokenOrDie","isBothTokensAlive","isToken","authState","authSuccessfully","configureTestingModule","imports","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","detectChanges","fillForm","userData","email","password","beforeEach","it","expect","toBeTruthy","properties","disabled","toBe","triggerEventHandler","toHaveBeenCalledWith","toHaveBeenCalled","not","Error","button","debugElement","nativeElement","querySelector","click","emailInput","classList","toContain","isLoadingState","next","isLoading","toEqual","spyOn","and","returnValue","window","console","error","log","ngOnDestroy","unsubscribe","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["import { fakeAsync, TestBed, tick } from '@angular/core/testing';\r\nimport { LoginComponent } from './login.component';\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { AuthService } from \"../auth.service\";\r\nimport { of, Subject, throwError } from \"rxjs\";\r\nimport { UIService } from \"../../shared/ui.service\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { findEl, setFieldValue } from \"../../spec-helpers/element.spec-helper\";\r\nimport { blankUser, validUser } from \"../../mocks\";\r\ndescribe('LoginComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let authServiceSpy;\r\n    let uiServiceSpy = Object.assign(Object.assign({}, jasmine.createSpyObj(\"UIService\", {\r\n        loadingStateNotifier: undefined,\r\n        showSnackBar: undefined\r\n    })), { loadingStateChange$: new Subject() });\r\n    // const uiServiceSpy = jasmine.createSpyObj(\r\n    //     \"UIService\",\r\n    //     {\r\n    //         loadingStateNotifier: undefined,\r\n    //         showSnackBar: undefined\r\n    //     }\r\n    // );\r\n    // uiServiceSpy.loadingStateChange$ = new Subject<boolean>();\r\n    // let uiService = TestBed.get(UIService)\r\n    // const loadingStateChange$NextSpy = spyOn(uiService.loadingStateChange$, 'next');\r\n    const setup = async (signupServiceReturnValues) => {\r\n        authServiceSpy = jasmine.createSpyObj('AuthService', Object.assign({ \r\n            // Successful responses per default\r\n            authChangeNotifier: undefined, registerUser: of(true), login: of(true), logout: undefined, refreshTokenOrDie: of(true), isBothTokensAlive: of(true), isToken: true, authState: of(true), authSuccessfully: undefined }, signupServiceReturnValues));\r\n        await TestBed.configureTestingModule({\r\n            imports: [\r\n                BrowserAnimationsModule,\r\n                ReactiveFormsModule,\r\n                MatFormFieldModule,\r\n                MatInputModule\r\n            ],\r\n            declarations: [LoginComponent],\r\n            providers: [\r\n                { provide: AuthService, useValue: authServiceSpy },\r\n                { provide: UIService, useValue: uiServiceSpy },\r\n            ],\r\n        })\r\n            .compileComponents();\r\n        fixture = TestBed.createComponent(LoginComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    };\r\n    const fillForm = (userData = validUser) => {\r\n        setFieldValue(fixture, 'email', userData.email);\r\n        setFieldValue(fixture, 'password', userData.password);\r\n    };\r\n    beforeEach(async () => {\r\n        // await setup();\r\n    });\r\n    beforeEach(() => {\r\n        // fixture = TestBed.createComponent(LoginComponent);\r\n        // component = fixture.componentInstance;\r\n        // fixture.detectChanges();\r\n    });\r\n    it('should create', async () => {\r\n        await setup();\r\n        // let loadingStateChange$NextSpy = spyOn(uiServiceSpy.loadingStateChange$, 'next');\r\n        //     // .and.throwError('someError');\r\n        //     // .and.returnValue(throwError('someError'));\r\n        expect(component).toBeTruthy();\r\n        expect(findEl(fixture, 'submit').properties.disabled).toBe(true);\r\n        // expect(loadingStateChange$NextSpy).toHaveBeenCalled();\r\n    });\r\n    it('submits the form successfully', async () => {\r\n        await setup();\r\n        fillForm();\r\n        findEl(fixture, 'form').triggerEventHandler('submit', {});\r\n        // tick(1000);\r\n        expect(authServiceSpy.login).toHaveBeenCalledWith(validUser);\r\n        expect(authServiceSpy.authChangeNotifier).toHaveBeenCalledWith(true);\r\n        expect(authServiceSpy.authSuccessfully).toHaveBeenCalled();\r\n        fixture.detectChanges();\r\n        expect(findEl(fixture, 'submit').properties.disabled).toBe(false);\r\n    });\r\n    it('does not submit an invalid form', async () => {\r\n        await setup();\r\n        findEl(fixture, 'form').triggerEventHandler('submit', {});\r\n        expect(authServiceSpy.login).not.toHaveBeenCalled();\r\n        expect(authServiceSpy.authChangeNotifier).not.toHaveBeenCalled();\r\n        expect(authServiceSpy.authSuccessfully).not.toHaveBeenCalled();\r\n    });\r\n    it('login sends falsy value when server response not valid', async () => {\r\n        await setup({\r\n            // Let the API report a failure\r\n            login: of(false),\r\n        });\r\n        fillForm();\r\n        findEl(fixture, 'form').triggerEventHandler('submit', {});\r\n        expect(authServiceSpy.login).toHaveBeenCalled();\r\n        expect(authServiceSpy.authChangeNotifier).toHaveBeenCalled();\r\n        expect(authServiceSpy.authSuccessfully).not.toHaveBeenCalled();\r\n    });\r\n    it('handles signup failure', async () => {\r\n        await setup({\r\n            // Let the API report a failure\r\n            login: throwError(new Error('Validation failed')),\r\n        });\r\n        fillForm();\r\n        // Wait for async validators\r\n        // tick(1000);\r\n        findEl(fixture, 'form').triggerEventHandler('submit', {});\r\n        fixture.detectChanges();\r\n        expect(authServiceSpy.login).toHaveBeenCalled();\r\n        expect(uiServiceSpy.showSnackBar).toHaveBeenCalled();\r\n    });\r\n    it(\"When username is blank, username field should display red outline \", async () => {\r\n        await setup();\r\n        fillForm(blankUser);\r\n        fixture.detectChanges();\r\n        const button = fixture.debugElement.nativeElement.querySelector(\"button\");\r\n        button.click();\r\n        fixture.detectChanges();\r\n        // const inputs = fixture.debugElement.nativeElement.querySelectorAll(\"input\");\r\n        // const usernameInput = inputs[0];\r\n        const emailInput = findEl(fixture, 'email').nativeElement;\r\n        expect(emailInput.classList).toContain(\"ng-invalid\");\r\n    });\r\n    it('Subscribe on uiServiceSpy.loadingStateChange$.next', fakeAsync(async () => {\r\n        await setup();\r\n        let isLoadingState = true;\r\n        // authServiceSpy.authChangeNotifier(isAuthenticated);\r\n        // tick(1000);\r\n        // fixture.detectChanges();\r\n        uiServiceSpy.loadingStateChange$.next(isLoadingState);\r\n        tick();\r\n        expect(component.isLoading).toEqual(true);\r\n    }));\r\n    it('Pass subscription on uiServiceSpy.loadingStateChange$.next ', async () => {\r\n        await setup();\r\n        spyOn(uiServiceSpy.loadingStateChange$, 'next')\r\n            .and.returnValue(throwError('someError'));\r\n        spyOn(window.console, 'log');\r\n        uiServiceSpy.loadingStateChange$.error(\"any error\");\r\n        expect(console.log).toHaveBeenCalled();\r\n    });\r\n    it('unsubscribe from loadingSubscription', async () => {\r\n        await setup();\r\n        spyOn(component['loadingSubscription'], 'unsubscribe');\r\n        component.ngOnDestroy();\r\n        expect(component['loadingSubscription'].unsubscribe).toHaveBeenCalledTimes(1);\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}